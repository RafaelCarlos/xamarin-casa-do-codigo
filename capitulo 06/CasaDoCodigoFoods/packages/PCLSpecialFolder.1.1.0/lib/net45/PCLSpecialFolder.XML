<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCLSpecialFolder</name>
    </assembly>
    <members>
        <member name="T:PCLStorage.SpecialFolder">
            <summary>
            Cross platform PCLSpecialFolder implemenations
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolder.Current">
            <summary>
            Current settings to use
            </summary>
        </member>
        <member name="T:PCLStorage.PCLStorageExtensions">
            <summary>
            Provides extension methods for the <see cref="T:PCLStorage.IFile"/> and <see cref="T:PCLStorage.IFolder"/> class
            </summary>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.CreateFolder(PCLStorage.IFolder,System.String,PCLStorage.CreationCollisionOption)">
            <summary>
            Creates a subfolder in this folder
            </summary>
            <param name="folder">Target folder</param>
            <param name="desiredName">The name of the folder to create</param>
            <param name="option">Specifies how to behave if the specified folder already exists</param>
            <returns>The newly created folder</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.TryGetFileAsync(PCLStorage.IFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a file in this folder
            </summary>
            <param name="folder">Target folder</param>
            <param name="name">The name of the file to get</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The requested file, or null if it does not exist</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.TryGetFolderAsync(PCLStorage.IFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a folder in this folder
            </summary>
            <param name="folder">Target folder</param>
            <param name="name">The name of the folder to get</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The requested folder, or null if it does not exist</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.DeleteAsync(PCLStorage.IFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes file or folder and all of its contents
            </summary>
            <param name="folder">Target folder</param>
            <param name="name">The name of the file or folder to delete</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task which will complete after deleted</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.ReadAllBytesAsync(PCLStorage.IFile)">
            <summary>
            Reads the contents of a file as a byte[]
            </summary>
            <param name="file">The file to read </param>
            <returns>The contents of the file</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.WriteAllBytesAsync(PCLStorage.IFile,System.Byte[])">
            <summary>
            Writes byte[] to a file, overwriting any existing data
            </summary>
            <param name="file">The file to write to</param>
            <param name="bytes">The content to write to the file</param>
            <returns>A task which completes when the write operation finishes</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.ReadAllLinesAsync(PCLStorage.IFile)">
            <summary>
            Reads the contents of a file as a lines
            </summary>
            <param name="file">The file to read </param>
            <returns>The contents of the file</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.WriteAllLinesAsync(PCLStorage.IFile,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes lines to a file, overwriting any existing data
            </summary>
            <param name="file">The file to write to</param>
            <param name="lines">The content to write to the file</param>
            <returns>A task which completes when the write operation finishes</returns>
        </member>
        <member name="T:PCLStorage.SpecialFolderImplementation">
            <summary>
            Implementation for Feature
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.App">
            <summary>
            Application folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Local">
            <summary>
            Local data folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Roaming">
            <summary>
            Roaming data folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Temporary">
            <summary>
            Tamporary data folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Cache">
            <summary>
            Cache folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Documents">
            <summary>
            Documents folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Pictures">
            <summary>
            Pictures folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Music">
            <summary>
            Music folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Videos">
            <summary>
            Videos folder
            </summary>
        </member>
    </members>
</doc>
