<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PCLSpecialFolder</name>
    </assembly>
    <members>
        <member name="T:PCLStorage.AwaitExtensions">
            <summary>
            Extensions for use internally by PCLStorage for awaiting.
            </summary>
        </member>
        <member name="M:PCLStorage.AwaitExtensions.AsTaskNoThrow``1(Windows.Foundation.IAsyncOperation{``0},System.Threading.CancellationToken)">
            <summary>
            Returns a task that completes when the async operation completes,
            but never throws to the person awaiting it.
            </summary>
            <typeparam name="T">The type of value returned by the async operation.</typeparam>
            <param name="operation">The async operation.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task whose result is the completed task.</returns>
        </member>
        <member name="T:PCLStorage.SpecialFolderImplementation">
            <summary>
            Implementation for Feature
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.App">
            <summary>
            Application folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Local">
            <summary>
            Local data folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Roaming">
            <summary>
            Roaming data folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Temporary">
            <summary>
            Tamporary data folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Cache">
            <summary>
            Cache folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Documents">
            <summary>
            Documents folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Pictures">
            <summary>
            Pictures folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Music">
            <summary>
            Music folder
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolderImplementation.Videos">
            <summary>
            Videos folder
            </summary>
        </member>
        <member name="T:PCLStorage.Requires">
            <summary>
            Common runtime checks that throw ArgumentExceptions upon failure.
            </summary>
        </member>
        <member name="M:PCLStorage.Requires.NotNull``1(``0,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null.
            </summary>
            <typeparam name="T">The type of the parameter.</typeparam>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <returns>The value of the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="value"/> is <c>null</c></exception>
        </member>
        <member name="M:PCLStorage.Requires.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the specified parameter's value is null or empty.
            </summary>
            <param name="value">The value of the argument.</param>
            <param name="parameterName">The name of the parameter to include in any thrown exception.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:PCLStorage.Requires.Format(System.String,System.Object[])">
            <summary>
            Helper method that formats string arguments.
            </summary>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:PCLStorage.SFWinRTFolder">
            <summary>
            Represents a folder in the <see cref="T:PCLStorage.WinRTFileSystem"/>
            </summary>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.#ctor(Windows.Storage.IStorageFolder)">
            <summary>
            Creates a new <see cref="T:PCLStorage.SFWinRTFolder"/>
            </summary>
            <param name="wrappedFolder">The WinRT <see cref="T:Windows.Storage.IStorageFolder"/> to wrap</param>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.#ctor(Windows.Storage.IStorageFolder,System.Boolean)">
            <summary>
            Creates a new <see cref="T:PCLStorage.SFWinRTFolder"/>
            </summary>
            <param name="wrappedFolder">The WinRT <see cref="T:Windows.Storage.IStorageFolder"/> to wrap</param>
            <param name="isRootFolder">The root folder flag</param>
        </member>
        <member name="P:PCLStorage.SFWinRTFolder.Name">
            <summary>
            The name of the folder
            </summary>
        </member>
        <member name="P:PCLStorage.SFWinRTFolder.Path">
            <summary>
            The "full path" of the folder, which should uniquely identify it within a given <see cref="T:PCLStorage.IFileSystem"/>
            </summary>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.CreateFileAsync(System.String,PCLStorage.CreationCollisionOption,System.Threading.CancellationToken)">
            <summary>
            Creates a file in this folder
            </summary>
            <param name="desiredName">The name of the file to create</param>
            <param name="option">Specifies how to behave if the specified file already exists</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created file</returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.GetFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a file in this folder
            </summary>
            <param name="name">The name of the file to get</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The requested file, or null if it does not exist</returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.TryGetFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a file in this folder
            </summary>
            <param name="name">The name of the file to get</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.GetFilesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of the files in this folder
            </summary>
            <returns>A list of the files in the folder</returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.CreateFolderAsync(System.String,PCLStorage.CreationCollisionOption,System.Threading.CancellationToken)">
            <summary>
            Creates a subfolder in this folder
            </summary>
            <param name="desiredName">The name of the folder to create</param>
            <param name="option">Specifies how to behave if the specified folder already exists</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created folder</returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.GetFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a subfolder in this folder
            </summary>
            <param name="name">The name of the folder to get</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The requested folder, or null if it does not exist</returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.TryGetFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a subfolder in this folder
            </summary>
            <param name="name">The name of the folder to get</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The requested folder, or null if it does not exist</returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.GetFoldersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of subfolders in this folder
            </summary>
            <returns>A list of subfolders in the folder</returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.CheckExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks whether a folder or file exists at the given location.
            </summary>
            <param name="name">The name of the file or folder to check for.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task whose result is the result of the existence check.
            </returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes this folder and all of its contents
            </summary>
            <returns>A task which will complete after the folder is deleted</returns>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.op_Explicit(PCLStorage.SFWinRTFolder)~Windows.Storage.StorageFolder">
            <summary>
            Convert IFolder to StorageFolder
            </summary>
            <param name="folder">Base folder</param>
        </member>
        <member name="M:PCLStorage.SFWinRTFolder.op_Explicit(Windows.Storage.StorageFolder)~PCLStorage.SFWinRTFolder">
            <summary>
            Convert StorageFolder to IFolder
            </summary>
            <param name="folder">Base folder</param>
        </member>
        <member name="T:PCLStorage.SpecialFolder">
            <summary>
            Cross platform PCLSpecialFolder implemenations
            </summary>
        </member>
        <member name="P:PCLStorage.SpecialFolder.Current">
            <summary>
            Current settings to use
            </summary>
        </member>
        <member name="T:PCLStorage.PCLStorageExtensions">
            <summary>
            Provides extension methods for the <see cref="T:PCLStorage.IFile"/> and <see cref="T:PCLStorage.IFolder"/> class
            </summary>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.CreateFolder(PCLStorage.IFolder,System.String,PCLStorage.CreationCollisionOption)">
            <summary>
            Creates a subfolder in this folder
            </summary>
            <param name="folder">Target folder</param>
            <param name="desiredName">The name of the folder to create</param>
            <param name="option">Specifies how to behave if the specified folder already exists</param>
            <returns>The newly created folder</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.TryGetFileAsync(PCLStorage.IFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a file in this folder
            </summary>
            <param name="folder">Target folder</param>
            <param name="name">The name of the file to get</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The requested file, or null if it does not exist</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.TryGetFolderAsync(PCLStorage.IFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a folder in this folder
            </summary>
            <param name="folder">Target folder</param>
            <param name="name">The name of the folder to get</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The requested folder, or null if it does not exist</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.DeleteAsync(PCLStorage.IFolder,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes file or folder and all of its contents
            </summary>
            <param name="folder">Target folder</param>
            <param name="name">The name of the file or folder to delete</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task which will complete after deleted</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.ReadAllBytesAsync(PCLStorage.IFile)">
            <summary>
            Reads the contents of a file as a byte[]
            </summary>
            <param name="file">The file to read </param>
            <returns>The contents of the file</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.WriteAllBytesAsync(PCLStorage.IFile,System.Byte[])">
            <summary>
            Writes byte[] to a file, overwriting any existing data
            </summary>
            <param name="file">The file to write to</param>
            <param name="bytes">The content to write to the file</param>
            <returns>A task which completes when the write operation finishes</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.ReadAllLinesAsync(PCLStorage.IFile)">
            <summary>
            Reads the contents of a file as a lines
            </summary>
            <param name="file">The file to read </param>
            <returns>The contents of the file</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.WriteAllLinesAsync(PCLStorage.IFile,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes lines to a file, overwriting any existing data
            </summary>
            <param name="file">The file to write to</param>
            <param name="lines">The content to write to the file</param>
            <returns>A task which completes when the write operation finishes</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.ToStorageFileAsync(PCLStorage.IFile)">
            <summary>
            Convert from IFile to StorageFile
            </summary>
            <param name="file">Target file</param>
            <returns>Converted file</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.ToPCLFileAsync(Windows.Storage.StorageFile)">
            <summary>
            Convert from StorageFile to IFile
            </summary>
            <param name="storageFile">Target file</param>
            <returns>Converted file</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.ToStorageFolderAsync(PCLStorage.IFolder)">
            <summary>
            Convert from IFolder to StorageFolder
            </summary>
            <param name="folder">Target folder</param>
            <returns>Converted folder</returns>
        </member>
        <member name="M:PCLStorage.PCLStorageExtensions.ToPCLFolderAsync(Windows.Storage.StorageFolder)">
            <summary>
            Convert from StorageFolder to IFolder
            </summary>
            <param name="storageFolder">Target folder</param>
            <returns>Converted folder</returns>
        </member>
    </members>
</doc>
